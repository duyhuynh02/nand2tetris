// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
// Inspired by havivha => https://github.com/havivha/Nand2Tetris/blob/master/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array SCREEN;
    static int BLACK, WHITE; 
    static boolean currentColor;  
    static Array two_to_the_i;

    /** Initializes the Screen. */
    function void init() {
        let SCREEN = 16384; 
        let currentColor = true; 
        let BLACK = 1;
        let WHITE = 0;

        //Not complete the Math class yet 
        let two_to_the_i = Array.new(17);
        let two_to_the_i[0] = 1;
        let two_to_the_i[1] = 2;
        let two_to_the_i[2] = 4;
        let two_to_the_i[3] = 8;
        let two_to_the_i[4] = 16;
        let two_to_the_i[5] = 32;
        let two_to_the_i[6] = 64;
        let two_to_the_i[7] = 128;
        let two_to_the_i[8] = 256;
        let two_to_the_i[9] = 512;
        let two_to_the_i[10] = 1024;
        let two_to_the_i[11] = 2048;
        let two_to_the_i[12] = 4096;
        let two_to_the_i[13] = 8192;
        let two_to_the_i[14] = 16384;
        let two_to_the_i[15] = 16384 + 16384;   //32768
        let two_to_the_i[16] = 0;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while (i < 8192) {
            let SCREEN[i] = WHITE;
            let i = i + 1; 
        } 
        return; 
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b; 
        return; 
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;

        let address = (y * 32) + (x / 16);
        let mask = two_to_the_i[x & 15];

        if (currentColor) {
            let SCREEN[address] = SCREEN[address] | mask;
        }    
        else {
            let SCREEN[address] = SCREEN[address] & ~mask;
        }

        return; 
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int temp; 

        //Make sure that x2 > x1; change position x => y need to be changed too. 
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1; 
            let y1 = y2; 
            let y2 = temp; 
        }

        let dx = x2 - x1;
        let dy = y2 - y1; 

        //for verticalLine 
        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
        } else { 
                if (dy = 0) { 
                    do Screen.drawHorizontalLine(x1, x2, y1);
                } 
            else {
                do Screen.drawDiagonalLine(x1, y1, x2, y2, dx, dy); 
                }
        }

 
        return; 
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int count, temp;

        //Always need to make sure y1 < y2
        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        } 

        let count = y1; 
        while ( (count < y2) | (count = y2) ) {
            do Screen.drawPixel(x, count);
            let count = count + 1; 
        }

        return; 
    }

    /** Draws a horizontal line */
    function void drawHorizontalLine(int x1, int x2, int y) {
        while ( ~(x1 > x2) ) {
            do Screen.drawPixel(x1, y); 
            let x1 = x1 + 1; 
        }

        return; 
    }

    /** Draws a Diagonal Line  */ 
    function void drawDiagonalLine(int x1, int y1, int x2, int y2, int dx, int dy){
        var int a, b;
        var int diff;
        var int y_incr; 

        let a = 0;
        let b = 0;
        let diff = 0; 

        if (dy < 0) {
            let y_incr = -1;
        } else {
            let y_incr = 1;
        }

        while ( ~(a > dx) & ( ((y_incr = 1) & ~(b > dy)) | ((y_incr = -1) & ~(b < dy)) ) ) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + (dy * y_incr); 
            }
            else {
                let b = b + y_incr;     //whyyyyyy
                let diff = diff - dx; 
            }
        }

        return; 
    }


    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            let y1 = y1 + 1; 
        }
        return; 
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx; 

        let dy = -r; 
        while ( ~(dy > r) ) {
            let dx = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);     
            let dy = dy + 1;
        }
        return; 
    }
}

