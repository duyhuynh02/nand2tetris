// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, currentLength;
    field boolean isNeg;  

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let str = Array.new(maxLength);
            let currentLength = 0;
            let length = maxLength; 
            let isNeg = false; 
        } 
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return; 
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength; 
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j]; 
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c; 
        return; 
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if ( currentLength > (length - 1) ) {
            do Sys.error(17);
        }
        else {
            let str[currentLength] = c;
            let currentLength = currentLength + 1; 
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[currentLength] = 0; 
        let currentLength = currentLength - 1; 
        return; 
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i, d, len; 

        let len = length();

        while ( i < len ) {
            if ( (i = 0) & (str[i] = 45) ) {
                let isNeg = true; 
                let i = i + 1; 
            } 
            else { 
                let d = str[i] - 48;
                let value = ((value * 10) + d);
                let i = i + 1; 
            }
        }

        if (isNeg) {
            let isNeg = false; 
            return (-value);
        }
        return value; 

    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        //lastDigit = val % 10 
        var int lastDigit; 
        var char c; 

        //make sure it wont append already string 
        let currentLength = 0;

        if (val < 0) {
            let isNeg = true; 
            let val = Math.abs(val);
        }


        let lastDigit = (val - ( (val / 10) * 10));
        let c = (lastDigit + 48);
        if (val < 10) {
            if (isNeg) {
                do appendChar(45);
                let isNeg = false;
            }
            do appendChar(c);
        }
        else {
            let val = ( val / 10 );
            do setInt(val);
            do appendChar(c);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
