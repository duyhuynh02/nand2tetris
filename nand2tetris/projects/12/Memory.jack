// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static Array freeList; 

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;        //heapBase
        let freeList = heap;    
        let freeList[0] = null;            //next
        let freeList[1] = 14334;        //length

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {    
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value; 
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block; 

        if ( (freeList[1] > size + 2) | (freeList[1] = size + 2) ){
            let freeList[1] = freeList[1] - (size + 2);
            let block = freeList + 2 + freeList[1]; //return the block after freeList 
            let block[0] = null;            //pointer 
            let block[1] = size;        //size 
        }
        else {
            let block = Memory.topFit(size);
        }

        return block + 2; 

    }

    /** Best-fit heuristics to find the approriate size block to allocate */
    function Array topFit(int size) { 
        var Array temp, block; 

        let temp = freeList; 

        while (temp[1] < size + 2) {
            if (temp[0] = null) {
                return 0;
            }
            else {
                let temp = temp[0];
            }
        }

        let temp[1] = temp[1] - (size + 2);
        let block = temp + 2 + temp[1]; 
        let block[0] = null; 
        let block[1] = size;

        return block; 
    }


    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        //append object to the end of the freeList
        var Array temp; 

        let temp = freeList; 

        while (~(temp[0] = null)) {
            let temp = temp[0];
        }
        let temp[0] = o;
        let o[0] = null; 
        return;
    }   

}
